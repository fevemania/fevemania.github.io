<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fevemania&#39;s blog</title>
    <link>https://fevemania.github.io/</link>
    <description>Recent content on fevemania&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 30 Jun 2017 10:55:49 +0800</lastBuildDate>
    
	<atom:link href="https://fevemania.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How I Deploy This Blog With Hugo</title>
      <link>https://fevemania.github.io/post/how-i-build-this-blog-with-hugo/</link>
      <pubDate>Fri, 30 Jun 2017 10:55:49 +0800</pubDate>
      
      <guid>https://fevemania.github.io/post/how-i-build-this-blog-with-hugo/</guid>
      <description>這篇文章留給自己與需要的人作為筆記與參考用。(貼心提示: 請務必先了解Github的操作唷！)
用Hugo建部落格的優點在於簡潔，相對於Jeykll (自己折騰了好幾天)，Hugo的目錄結構簡單許多。然而，在部署上，它卻較Jeykll來得費功夫。本篇文章分享我試誤一整天後成功的做法。
本篇文章做法基於官方文件—如何部署Hugo到Github上做自己實作上的補充。該文提供三種部署的做法，這邊我選用第三種做法，分別建立 存網站源碼的repo (你所編輯的部分) 以及 放實際編譯後的html, css, js的repo 。這種做法的優點是使其他人容易記住你的網址。他只要打上http://&amp;lt;your-username&amp;gt;.github.io，即可找到你的網站！
那接下來就開始部署流程吧 ~（本篇文章預設讀者已安裝hugo工具與git工具)
Step1. 在Github頁面下，建兩個Repository
一個命名為&amp;lt;your-username&amp;gt;-hugo用來存你編輯的部落格的資訊，另一個命名為&amp;lt;your username&amp;gt;.github.io用來存編譯後實際顯示的頁面。
重點提示: repo1和repo2都不要在創建時預設任何檔案，包含.gitignore和README.md，否則後面會出錯。
e.g.
Step2. 在本機端，於command line輸入以下指令，請把&amp;lt;your-username&amp;gt;改成你自己的username
mkdir &amp;lt;your-username&amp;gt;-hugo # 建立資料夾存放網站源碼 cd &amp;lt;your-username&amp;gt;-hugo hugo new site . # 於目錄下創建hugo網站 (注意: 這個指令只能在空目錄下達) # 指令的Output會給你一些Hint, 包含選擇你想要的themes # 這邊我選了Minimo這個theme git init # 根據Minimo建議的方法，minimo視為本repo的依賴，且不會儲存在自己的repo中 git submodule add https://github.com/MunifTanjim/minimo themes/minimo git submodule init git submodule update # 把configuration template從themes/minimo複製到本專案root目錄 cp themes/minimo/exampleSite/config.toml . # 接下來就可以測試一下自己的網站囉 hugo server # 此指令下達後, 可在瀏覽器開localhost:1313觀看網頁的雛形 # 確認無錯誤後, 按Ctrl-C關閉server # 將fevemania.</description>
    </item>
    
    <item>
      <title>Intro Matplotlib, What is different in Axes and Figure ?</title>
      <link>https://fevemania.github.io/post/matplotlib-figure-vs-axes/</link>
      <pubDate>Wed, 28 Jun 2017 17:44:03 +0800</pubDate>
      
      <guid>https://fevemania.github.io/post/matplotlib-figure-vs-axes/</guid>
      <description>Whenever we need to visualize some image, statistical chart, or even data in python, Matplotlib the Python 2D plotting library, usually comes into mind.
Though we could just search for someone&amp;rsquo;s code whenever we need plot some kinds of chart, such as histogram, piechart. However, I believed there are still a little bit concepts we could be familiar with at the beginning of learning Matplotlib library to help get more sense of it and be able to make a good tune to our chart whenever we use it.</description>
    </item>
    
    <item>
      <title>Contrast Limited Adaptive Histogram Equalization</title>
      <link>https://fevemania.github.io/post/local-histogram-normalization/</link>
      <pubDate>Wed, 28 Jun 2017 17:36:07 +0800</pubDate>
      
      <guid>https://fevemania.github.io/post/local-histogram-normalization/</guid>
      <description>今天嘗試寫中文版的Post，接續昨天的Po文，Histograms Equalization 可以用在深度學習中針對圖片資料對比度太低的問題進行預處理 (data prepocessing)。
以下舉一個例子，這個資料集是GTSRB (German Traffic Sign Recognition Benchmark)，裡面有43種不同的路標，被用來訓練機器辨識路標號誌。
下圖為 限速60 的號誌，如圖可知，在不同的光影變化下，對像素強度的影響很大，會影響機器的視覺 (機器看到的就是一個個像素，如果像素值都很接近，那機器怎麼會能正確分辨出60呢 ?)
若我們將圖片轉為灰階 (簡單講就是將彩色圖片轉成黑白圖片)，並應用上一篇Po文的Global Histogram Equalization，那麼輸出結果將透過把整張像素的值分散化，改善對比度。從人的視覺角度看就是圖片對比度增強，對機器來說則是 使其更易將特定特徵 (想識別的對象) 與其背景(即特徵以外的地方) 做分離。
然而，就像上篇Po文提到的，Global Histogram Equalization的做法就是盲目地平均化整張圖片的像素強度，所以可能會導致像5370圖的情形，發生資訊的遺失 (像素被平均化)，讓分佈在60的像素值相對變低。
所以今天要介紹另一個實務上更為常用的 Contrast Limited Adaptive Histogram Equalization。
用一句話解釋，就是改成把整個圖片切成一個個block做局部正規化。
更多資料可見維基百科-AHE
實作細節可見OpenCV</description>
    </item>
    
    <item>
      <title>Global Histogram Equalization</title>
      <link>https://fevemania.github.io/post/global-histogram-equalization/</link>
      <pubDate>Wed, 28 Jun 2017 15:08:50 +0800</pubDate>
      
      <guid>https://fevemania.github.io/post/global-histogram-equalization/</guid>
      <description>What Histogram Equalization does is to improve the contrast of the image.
The picture above shows distribution of pixel intensity in grayscale.
x-axis : The intensity value ranged from 0 - 255. y-axis : The number of pixel given the particular intensity value.
pros: be useful in images with backgrounds and foregrounds that are both bright or both dark.
cons: comes along with a side-effect which may indiscriminately increase the contrast of background noise.</description>
    </item>
    
  </channel>
</rss>